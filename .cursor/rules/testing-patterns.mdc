---
description: Testing conventions and patterns for XSHA application
---
# Testing Patterns and Conventions

## Testing Strategy Overview

### Testing Pyramid
- **Unit Tests**: Service layer business logic, utility functions
- **Integration Tests**: Database operations, API endpoints  
- **End-to-End Tests**: Complete user workflows

### Test Organization
```
backend/
├── handlers/
│   ├── auth_test.go
│   └── task_test.go
├── services/
│   ├── auth_test.go
│   └── task_test.go
├── repository/
│   ├── task_test.go
│   └── project_test.go
└── utils/
    └── crypto_test.go

frontend/
├── src/
│   ├── components/
│   │   ├── TaskList.test.tsx
│   │   └── ProjectForm.test.tsx
│   ├── lib/
│   │   ├── api/
│   │   │   └── tasks.test.ts
│   │   └── utils.test.ts
│   └── hooks/
│       └── usePageTitle.test.ts
```

## Backend Testing Patterns

### Unit Test Structure
```go
package services

import (
    "testing"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/mock"
)

func TestTaskService_CreateTask(t *testing.T) {
    tests := []struct {
        name    string
        setup   func(*MockTaskRepository)
        input   CreateTaskRequest
        want    *Task
        wantErr bool
    }{
        {
            name: "successful creation",
            setup: func(repo *MockTaskRepository) {
                repo.On("Create", mock.AnythingOfType("*models.Task")).Return(nil)
            },
            input: CreateTaskRequest{
                Title: "Test Task",
                ProjectID: 1,
            },
            want: &Task{Title: "Test Task"},
            wantErr: false,
        },
        {
            name: "validation error",
            setup: func(repo *MockTaskRepository) {},
            input: CreateTaskRequest{}, // Missing title
            want: nil,
            wantErr: true,
        },
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            mockRepo := new(MockTaskRepository)
            tt.setup(mockRepo)
            
            service := NewTaskService(mockRepo, nil)
            got, err := service.CreateTask(1, tt.input)
            
            if tt.wantErr {
                assert.Error(t, err)
                assert.Nil(t, got)
            } else {
                assert.NoError(t, err)
                assert.Equal(t, tt.want.Title, got.Title)
            }
            
            mockRepo.AssertExpectations(t)
        })
    }
}
```

### Repository Testing with Test Database
```go
func TestTaskRepository_Create(t *testing.T) {
    db := setupTestDB(t)
    defer cleanupTestDB(t, db)
    
    repo := NewTaskRepository(db)
    
    task := &models.Task{
        Title: "Test Task",
        UserID: 1,
    }
    
    err := repo.Create(task)
    assert.NoError(t, err)
    assert.NotZero(t, task.ID)
    
    // Verify task was saved
    saved, err := repo.GetByID(task.ID)
    assert.NoError(t, err)
    assert.Equal(t, task.Title, saved.Title)
}

func setupTestDB(t *testing.T) *gorm.DB {
    db, err := gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
    require.NoError(t, err)
    
    err = db.AutoMigrate(&models.Task{}, &models.User{}, &models.Project{})
    require.NoError(t, err)
    
    return db
}
```

### HTTP Handler Testing
```go
func TestAuthHandlers_LoginHandler(t *testing.T) {
    gin.SetMode(gin.TestMode)
    
    tests := []struct {
        name           string
        requestBody    interface{}
        setupMocks     func(*MockAuthService)
        expectedStatus int
        expectedBody   string
    }{
        {
            name: "successful login",
            requestBody: map[string]string{
                "username": "testuser",
                "password": "testpass",
            },
            setupMocks: func(auth *MockAuthService) {
                auth.On("Login", "testuser", "testpass").Return("token123", nil)
            },
            expectedStatus: 200,
            expectedBody:   `{"token":"token123"}`,
        },
        {
            name:           "invalid request",
            requestBody:    map[string]string{},
            setupMocks:     func(*MockAuthService) {},
            expectedStatus: 400,
        },
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            mockAuth := new(MockAuthService)
            tt.setupMocks(mockAuth)
            
            handlers := NewAuthHandlers(mockAuth, nil)
            
            router := gin.New()
            router.POST("/login", handlers.LoginHandler)
            
            body, _ := json.Marshal(tt.requestBody)
            req := httptest.NewRequest("POST", "/login", strings.NewReader(string(body)))
            req.Header.Set("Content-Type", "application/json")
            
            w := httptest.NewRecorder()
            router.ServeHTTP(w, req)
            
            assert.Equal(t, tt.expectedStatus, w.Code)
            if tt.expectedBody != "" {
                assert.JSONEq(t, tt.expectedBody, w.Body.String())
            }
            
            mockAuth.AssertExpectations(t)
        })
    }
}
```

## Frontend Testing Patterns

### Component Testing with React Testing Library
```tsx
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { vi } from 'vitest';
import TaskForm from './TaskForm';
import * as tasksApi from '@/lib/api/tasks';

// Mock API calls
vi.mock('@/lib/api/tasks');

describe('TaskForm', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  test('renders form fields correctly', () => {
    render(<TaskForm />);
    
    expect(screen.getByLabelText(/title/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/description/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /submit/i })).toBeInTheDocument();
  });

  test('submits form with valid data', async () => {
    const mockCreateTask = vi.mocked(tasksApi.createTask);
    mockCreateTask.mockResolvedValue({ id: 1, title: 'Test Task' });

    render(<TaskForm onSuccess={vi.fn()} />);
    
    fireEvent.change(screen.getByLabelText(/title/i), {
      target: { value: 'Test Task' }
    });
    
    fireEvent.click(screen.getByRole('button', { name: /submit/i }));
    
    await waitFor(() => {
      expect(mockCreateTask).toHaveBeenCalledWith({
        title: 'Test Task',
        description: ''
      });
    });
  });

  test('displays error message on submission failure', async () => {
    const mockCreateTask = vi.mocked(tasksApi.createTask);
    mockCreateTask.mockRejectedValue(new Error('Creation failed'));

    render(<TaskForm />);
    
    fireEvent.change(screen.getByLabelText(/title/i), {
      target: { value: 'Test Task' }
    });
    
    fireEvent.click(screen.getByRole('button', { name: /submit/i }));
    
    await waitFor(() => {
      expect(screen.getByText(/creation failed/i)).toBeInTheDocument();
    });
  });
});
```

### API Client Testing
```typescript
import { describe, test, expect, vi, beforeEach } from 'vitest';
import { getTasks, createTask } from './tasks';

// Mock fetch
global.fetch = vi.fn();

describe('tasks API', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    (fetch as jest.MockedFunction<typeof fetch>).mockClear();
  });

  test('getTasks returns task list', async () => {
    const mockTasks = [
      { id: 1, title: 'Task 1' },
      { id: 2, title: 'Task 2' }
    ];

    (fetch as jest.MockedFunction<typeof fetch>).mockResolvedValue({
      ok: true,
      json: async () => ({ data: mockTasks })
    } as Response);

    const result = await getTasks();

    expect(fetch).toHaveBeenCalledWith('/api/v1/tasks', {
      headers: {
        'Authorization': 'Bearer null',
        'Content-Type': 'application/json'
      }
    });
    expect(result.data).toEqual(mockTasks);
  });

  test('createTask handles API errors', async () => {
    (fetch as jest.MockedFunction<typeof fetch>).mockResolvedValue({
      ok: false,
      status: 400,
      json: async () => ({ error: 'Validation failed' })
    } as Response);

    await expect(createTask({ title: '' })).rejects.toThrow('Validation failed');
  });
});
```

### Hook Testing
```tsx
import { renderHook, act } from '@testing-library/react';
import { usePageTitle } from './usePageTitle';

describe('usePageTitle', () => {
  test('sets document title', () => {
    const originalTitle = document.title;
    
    renderHook(() => usePageTitle('Test Page'));
    
    expect(document.title).toBe('Test Page | XSHA');
    
    // Cleanup
    document.title = originalTitle;
  });

  test('updates title when value changes', () => {
    const { rerender } = renderHook(
      ({ title }) => usePageTitle(title),
      { initialProps: { title: 'Initial' } }
    );
    
    expect(document.title).toBe('Initial | XSHA');
    
    rerender({ title: 'Updated' });
    expect(document.title).toBe('Updated | XSHA');
  });
});
```

## Test Configuration

### Backend Test Setup
```go
// main_test.go
func TestMain(m *testing.M) {
    // Setup test environment
    os.Setenv("ENVIRONMENT", "test")
    os.Setenv("DB_TYPE", "sqlite")
    os.Setenv("DB_PATH", ":memory:")
    
    code := m.Run()
    
    // Cleanup
    os.Exit(code)
}
```

### Frontend Test Setup (Vite + Vitest)
```typescript
// vitest.config.ts
import { defineConfig } from 'vitest/config';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  test: {
    environment: 'jsdom',
    setupFiles: ['./src/test/setup.ts'],
    globals: true,
  },
});
```

```typescript
// src/test/setup.ts
import '@testing-library/jest-dom';
import { vi } from 'vitest';

// Mock react-i18next
vi.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key: string) => key,
    i18n: { changeLanguage: vi.fn() }
  })
}));
```

## Mock Patterns

### Backend Interface Mocks
```go
type MockTaskRepository struct {
    mock.Mock
}

func (m *MockTaskRepository) Create(task *models.Task) error {
    args := m.Called(task)
    return args.Error(0)
}

func (m *MockTaskRepository) GetByID(id uint) (*models.Task, error) {
    args := m.Called(id)
    return args.Get(0).(*models.Task), args.Error(1)
}
```

### Frontend API Mocks
```typescript
// __mocks__/api.ts
export const mockCreateTask = vi.fn();
export const mockGetTasks = vi.fn();

export default {
  createTask: mockCreateTask,
  getTasks: mockGetTasks,
};
```

## CI/CD Testing Pipeline

### GitHub Actions Example
```yaml
name: Test
on: [push, pull_request]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.23.1
      - run: |
          cd backend
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: |
          cd frontend
          npm install -g pnpm
          pnpm install
          pnpm run test
          pnpm run test:coverage
```

## Coverage Goals
- **Backend**: Aim for 80%+ coverage on service layer
- **Frontend**: Focus on component behavior and API integration
- **Critical Paths**: 100% coverage for authentication and payment flows

## Test Data Management
- Use factories/builders for test data creation
- Keep test data isolated between tests
- Use realistic but minimal data sets
- Implement proper cleanup between tests