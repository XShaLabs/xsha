---
description: "Authentication and authorization patterns"
---

# Authentication System

XSHA uses JWT-based authentication with comprehensive security features.

## JWT Token System

### Token Generation
- Tokens generated in [services/auth.go](mdc:backend/services/auth.go)
- Include user claims and expiration
- Signed with secret from configuration

```go
type Claims struct {
    Username string `json:"username"`
    jwt.RegisteredClaims
}

func (s *AuthService) GenerateToken(username string) (string, error) {
    expirationTime := time.Now().Add(24 * time.Hour)
    claims := &Claims{
        Username: username,
        RegisteredClaims: jwt.RegisteredClaims{
            ExpiresAt: jwt.NewNumericDate(expirationTime),
        },
    }
    
    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
    return token.SignedString(s.jwtSecret)
}
```

### Token Validation
- Middleware validates tokens for protected routes
- Blacklist support for logout functionality
- Token stored in [database/models.go](mdc:backend/database/models.go) TokenBlacklist

## Authentication Flow

### 1. Login Process
```go
// POST /api/v1/auth/login
{
    "username": "admin",
    "password": "password"
}

// Response
{
    "data": {
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        "user": {
            "username": "admin"
        }
    }
}
```

### 2. Protected Requests
```http
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

### 3. Logout Process
```go
// POST /api/v1/auth/logout
// Adds token to blacklist
{
    "message": "Logged out successfully"
}
```

## Middleware Authentication

### Auth Middleware
- Located in [middleware/auth.go](mdc:backend/middleware/auth.go)
- Validates JWT tokens
- Checks token blacklist
- Sets user context

```go
func AuthMiddlewareWithService(authService services.AuthService, cfg *config.Config) gin.HandlerFunc {
    return func(c *gin.Context) {
        authHeader := c.GetHeader("Authorization")
        if authHeader == "" {
            c.JSON(http.StatusUnauthorized, gin.H{"error": "Authorization header required"})
            c.Abort()
            return
        }

        tokenString := strings.TrimPrefix(authHeader, "Bearer ")
        claims, err := authService.ValidateToken(tokenString)
        if err != nil {
            c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid token"})
            c.Abort()
            return
        }

        c.Set("username", claims.Username)
        c.Next()
    }
}
```

## Frontend Authentication

### Auth Context
- React context in [contexts/AuthContext.tsx](mdc:frontend/src/contexts/AuthContext.tsx)
- Manages authentication state
- Provides login/logout functions

```tsx
interface AuthContextType {
  isAuthenticated: boolean;
  username: string | null;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
  loading: boolean;
}
```

### Protected Routes
- [components/ProtectedRoute.tsx](mdc:frontend/src/components/ProtectedRoute.tsx)
- Redirects to login if not authenticated
- Preserves intended destination

```tsx
function ProtectedRoute({ children }: { children: React.ReactNode }) {
  const { isAuthenticated, loading } = useAuth();
  const location = useLocation();

  if (loading) return <div>Loading...</div>;
  
  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return <>{children}</>;
}
```

### Token Storage
- Stored in localStorage
- Automatically included in API requests
- Cleared on logout

## Security Features

### Rate Limiting
- Login endpoint has special rate limiting
- Prevents brute force attacks
- Configurable limits

### Token Blacklisting
- Tokens added to blacklist on logout
- Database table: TokenBlacklist
- Cleanup of expired tokens

### Password Security
- Passwords are hashed before storage
- Use bcrypt or similar secure hashing
- Never store plain text passwords

## Login Logging

### Login Attempts
- All login attempts logged in LoginLog table
- Tracks success/failure, IP, user agent
- Used for security monitoring

```go
type LoginLog struct {
    Username  string    `json:"username"`
    Success   bool      `json:"success"`
    IP        string    `json:"ip"`
    UserAgent string    `json:"user_agent"`
    Reason    string    `json:"reason"`
    LoginTime time.Time `json:"login_time"`
}
```

### Admin Dashboard
- Login logs viewable in admin interface
- Security analytics and monitoring
- Failed login attempt tracking

## API Security

### CORS Configuration
- Configure allowed origins
- Set appropriate headers
- Handle preflight requests

### Security Headers
- Content-Type validation
- CSRF protection where needed
- Secure cookie settings

## Configuration

### Environment Variables
```env
JWT_SECRET=your-secret-key
TOKEN_EXPIRATION_HOURS=24
MAX_LOGIN_ATTEMPTS=5
RATE_LIMIT_WINDOW=60
```

### Default Configuration
- Secure defaults in [config/config.go](mdc:backend/config/config.go)
- Override with environment variables
- Validation of security settings

Always follow these authentication patterns to maintain security across the application.