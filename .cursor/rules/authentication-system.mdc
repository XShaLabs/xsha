---
globs: backend/middleware/auth.go,backend/services/auth.go,backend/handlers/auth.go,frontend/src/contexts/AuthContext.tsx
---
# Authentication System Architecture

## Backend Authentication (JWT)

### JWT Token Management
- Tokens are generated in [backend/services/auth.go](mdc:backend/services/auth.go)
- Token validation handled by [backend/middleware/auth.go](mdc:backend/middleware/auth.go)
- Token blacklist for logout functionality in [backend/repository/token_blacklist.go](mdc:backend/repository/token_blacklist.go)

### Authentication Flow
1. User submits credentials to `/api/v1/auth/login`
2. AuthService validates credentials
3. JWT token generated with expiration
4. Token returned to client
5. Client includes token in Authorization header for subsequent requests
6. Middleware validates token on each protected route

### Rate Limiting
- Login endpoint has rate limiting middleware
- Prevents brute force attacks
- Configured per IP address

### User Session Management
- Login logs tracked in [backend/repository/login_log.go](mdc:backend/repository/login_log.go)
- Admin operation logs for audit trail
- Token blacklist for secure logout

## Frontend Authentication

### AuthContext Pattern
- React context in [frontend/src/contexts/AuthContext.tsx](mdc:frontend/src/contexts/AuthContext.tsx)
- Provides authentication state throughout the app
- Handles token storage and automatic refresh

### Protected Routes
- Use `ProtectedRoute` component for authenticated pages
- Redirects to login if not authenticated
- Preserves intended destination for post-login redirect

### Token Storage
- Store JWT tokens securely (localStorage/sessionStorage)
- Include token in all API requests
- Handle token expiration gracefully

## Security Patterns

### Middleware Stack
Authentication middleware validates:
1. Token presence in Authorization header
2. Token format (`Bearer <token>`)
3. Token signature and expiration
4. Token not in blacklist

### Error Handling
- Return standardized 401 responses for authentication failures
- Use i18n for error messages
- Log authentication attempts for monitoring

### Admin Operations
- Special logging for admin operations
- Operation logs include user, action, and timestamp
- Helps with audit trails and compliance

## Implementation Guidelines

### Adding New Protected Endpoints
1. Add route to protected group in [backend/routes/routes.go](mdc:backend/routes/routes.go)
2. Authentication middleware automatically applied
3. Access user info via `c.Get("user_id")` in handlers

### Frontend API Integration
- Use established API client patterns from [frontend/src/lib/api/](mdc:frontend/src/lib/api/)
- Include authentication headers automatically
- Handle 401 responses by redirecting to login