---
globs: backend/middleware/error.go,backend/i18n/*.go,frontend/src/lib/errors.ts
---
# Standardized Error Handling Patterns

## Backend Error Handling

### Error Response Format
All API errors follow a consistent JSON structure:
```json
{
  "error": "Localized error message"
}
```

### HTTP Status Code Standards
- **400 Bad Request**: Input validation errors, malformed requests
- **401 Unauthorized**: Authentication required or token invalid
- **403 Forbidden**: Insufficient permissions
- **404 Not Found**: Resource not found
- **422 Unprocessable Entity**: Business logic validation failures
- **429 Too Many Requests**: Rate limiting triggered
- **500 Internal Server Error**: Unexpected server errors

### Error Middleware Pattern
The error middleware in [backend/middleware/error.go](mdc:backend/middleware/error.go) handles:
- Panic recovery
- Structured error logging
- Consistent error response formatting
- Language-aware error messages

### Handler Error Pattern
```go
func (h *TaskHandlers) CreateTask(c *gin.Context) {
    lang := middleware.GetLangFromContext(c)
    
    var request CreateTaskRequest
    if err := c.ShouldBindJSON(&request); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{
            "error": i18n.T(lang, "validation.invalid_input"),
        })
        return
    }
    
    task, err := h.taskService.CreateTask(userID, request)
    if err != nil {
        utils.Error("Failed to create task", "error", err, "user_id", userID)
        
        // Handle specific error types
        if errors.Is(err, services.ErrProjectNotFound) {
            c.JSON(http.StatusNotFound, gin.H{
                "error": i18n.T(lang, "project.not_found"),
            })
            return
        }
        
        c.JSON(http.StatusInternalServerError, gin.H{
            "error": i18n.T(lang, "task.create.failed"),
        })
        return
    }
    
    c.JSON(http.StatusCreated, task)
}
```

### Service Layer Error Patterns
- Return domain-specific errors for business logic failures
- Use standard Go error wrapping: `fmt.Errorf("context: %w", err)`
- Log errors at the service level with context
- Don't expose internal errors to API responses

```go
var (
    ErrTaskNotFound = errors.New("task not found")
    ErrInvalidTaskStatus = errors.New("invalid task status")
    ErrProjectNotFound = errors.New("project not found")
)

func (s *taskService) UpdateTaskStatus(taskID uint, status string) error {
    task, err := s.taskRepo.GetByID(taskID)
    if err != nil {
        if errors.Is(err, gorm.ErrRecordNotFound) {
            return ErrTaskNotFound
        }
        return fmt.Errorf("failed to get task: %w", err)
    }
    
    if !isValidStatusTransition(task.Status, status) {
        return ErrInvalidTaskStatus
    }
    
    // Update logic...
    return nil
}
```

## Internationalization Error Messages

### Error Message Structure
Error messages are organized by domain in [backend/i18n/locales/](mdc:backend/i18n/locales/):
- `errors.json` - General error messages
- `auth.json` - Authentication-related errors
- `tasks.json` - Task-specific errors
- `projects.json` - Project-specific errors

### Error Key Conventions
```json
{
  "validation": {
    "required": "This field is required",
    "invalid_email": "Please enter a valid email address",
    "password_too_short": "Password must be at least 8 characters"
  },
  "auth": {
    "invalid_credentials": "Invalid username or password",
    "token_expired": "Your session has expired, please login again"
  },
  "task": {
    "not_found": "Task not found",
    "create": {
      "failed": "Failed to create task",
      "title_required": "Task title is required"
    }
  }
}
```

## Frontend Error Handling

### API Error Handling Pattern
```typescript
// In frontend/src/lib/api/request.ts
export async function apiRequest<T>(
  endpoint: string,
  options?: RequestInit
): Promise<T> {
  try {
    const response = await fetch(`/api/v1${endpoint}`, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${getToken()}`,
        ...options?.headers,
      },
      ...options,
    });
    
    if (!response.ok) {
      if (response.status === 401) {
        // Handle authentication errors
        redirectToLogin();
        throw new Error('Authentication required');
      }
      
      const errorData = await response.json();
      throw new Error(errorData.error || 'An error occurred');
    }
    
    return await response.json();
  } catch (error) {
    if (error instanceof Error) {
      throw error;
    }
    throw new Error('Network error occurred');
  }
}
```

### Component Error Handling
```tsx
import { useState } from 'react';
import { toast } from 'sonner';

export default function TaskForm() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const handleSubmit = async (formData: TaskCreateRequest) => {
    try {
      setLoading(true);
      setError(null);
      
      await createTask(formData);
      toast.success('Task created successfully');
      
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Unknown error';
      setError(message);
      toast.error(message);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      {error && (
        <div className="bg-destructive/15 text-destructive px-3 py-2 rounded-md text-sm">
          {error}
        </div>
      )}
      {/* Form fields */}
    </form>
  );
}
```

### Error Boundaries
- Implement React Error Boundaries for unexpected errors
- Provide fallback UI for component crashes
- Log errors to monitoring service

## Logging and Monitoring

### Structured Logging
```go
utils.Error("Operation failed",
    "operation", "create_task",
    "user_id", userID,
    "error", err,
    "request_data", request,
)
```

### Error Tracking
- Log all errors with sufficient context
- Include request IDs for tracing
- Monitor error rates and patterns
- Set up alerts for critical errors

## Validation Error Patterns

### Input Validation
- Use Gin's binding validation tags
- Return field-specific error messages
- Support multiple validation errors

### Business Logic Validation
- Validate business rules in service layer
- Return appropriate error types
- Include context in error messages