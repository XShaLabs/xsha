---
globs: backend/database/*.go,backend/repository/*.go
---
# Database Patterns and GORM Usage

## Database Architecture
- **ORM**: GORM v2 for type-safe database operations
- **Support**: MySQL (production) and SQLite (development)
- **Models**: Centralized in [backend/database/models.go](mdc:backend/database/models.go)
- **Manager**: Database connection management in [backend/database/database.go](mdc:backend/database/database.go)

## Model Definitions
Follow the established patterns in [backend/database/models.go](mdc:backend/database/models.go):

### Standard Model Structure
```go
type Task struct {
    ID          uint           `gorm:"primaryKey" json:"id"`
    CreatedAt   time.Time      `json:"created_at"`
    UpdatedAt   time.Time      `json:"updated_at"`
    DeletedAt   gorm.DeletedAt `gorm:"index" json:"-"`
    
    // Domain fields
    Title       string `gorm:"not null" json:"title"`
    Description string `json:"description"`
    UserID      uint   `gorm:"not null" json:"user_id"`
    
    // Relationships
    User        User           `gorm:"foreignKey:UserID" json:"user,omitempty"`
}
```

### Required Fields
- Always include `ID`, `CreatedAt`, `UpdatedAt`, `DeletedAt`
- Use `gorm.DeletedAt` for soft deletes
- Add appropriate GORM tags for constraints
- Use `json:"-"` for fields that shouldn't be serialized

## Repository Pattern
Each model should have a corresponding repository following this interface pattern:

```go
type TaskRepository interface {
    Create(task *models.Task) error
    GetByID(id uint) (*models.Task, error)
    GetByUserID(userID uint, id uint) (*models.Task, error)
    List(userID uint, filters TaskFilters) ([]*models.Task, int64, error)
    Update(task *models.Task) error
    Delete(id uint) error
}
```

### Repository Implementation Patterns
- Inject database connection via constructor
- Use method chaining for complex queries
- Always handle errors appropriately
- Use preloading for relationships

```go
func (r *taskRepository) GetByID(id uint) (*models.Task, error) {
    var task models.Task
    err := r.db.Preload("User").Preload("Project").First(&task, id).Error
    if err != nil {
        if errors.Is(err, gorm.ErrRecordNotFound) {
            return nil, err
        }
        return nil, err
    }
    return &task, nil
}
```

## Query Patterns

### Filtering and Pagination
```go
func (r *taskRepository) List(userID uint, filters TaskFilters) ([]*models.Task, int64, error) {
    var tasks []*models.Task
    var total int64
    
    query := r.db.Model(&models.Task{}).Where("user_id = ?", userID)
    
    // Apply filters
    if filters.Keyword != "" {
        query = query.Where("title ILIKE ? OR description ILIKE ?", 
            "%"+filters.Keyword+"%", "%"+filters.Keyword+"%")
    }
    
    // Count total
    query.Count(&total)
    
    // Apply pagination
    err := query.Offset((filters.Page - 1) * filters.PageSize).
        Limit(filters.PageSize).
        Preload("User").
        Find(&tasks).Error
        
    return tasks, total, err
}
```

### Soft Delete Handling
- GORM automatically handles soft deletes with `DeletedAt` field
- Use `Unscoped()` to include soft-deleted records
- Permanent delete: `db.Unscoped().Delete(&model)`

### Transaction Management
```go
func (r *taskRepository) CreateWithDependencies(task *models.Task, deps []models.Dependency) error {
    return r.db.Transaction(func(tx *gorm.DB) error {
        if err := tx.Create(task).Error; err != nil {
            return err
        }
        
        for _, dep := range deps {
            dep.TaskID = task.ID
            if err := tx.Create(&dep).Error; err != nil {
                return err
            }
        }
        
        return nil
    })
}
```

## Migration Patterns
- Migrations handled automatically by GORM's AutoMigrate
- Called during application startup in [backend/database/database.go](mdc:backend/database/database.go)
- For complex migrations, consider manual SQL scripts

## Database Connection Management
- Connection pooling configured in DatabaseManager
- Graceful shutdown handling
- Health checks for database connectivity

## Performance Optimization
- Use `Select()` to fetch only required fields
- Implement proper indexing in model definitions
- Use `Preload()` instead of N+1 queries
- Consider pagination for large datasets

## Testing Database Operations
- Use in-memory SQLite for tests
- Create test fixtures and factories
- Clean up data between tests
- Mock repository interfaces for unit tests