---
globs: *.go
---

# Go Standards and Conventions

Follow these Go conventions used throughout the XSHA backend.

## Package Organization

- **Package names**: Use lowercase, single words (e.g., `handlers`, `services`, `repository`)
- **File names**: Use snake_case for multi-word files (e.g., `admin_operation_log.go`)
- **Struct names**: Use PascalCase (e.g., `AuthHandlers`, `GitCredential`)

## Dependency Injection Pattern

Always use constructor functions for dependency injection:

```go
// Service constructor example
func NewAuthService(tokenRepo repository.TokenBlacklistRepository, loginLogRepo repository.LoginLogRepository, cfg *config.Config) AuthService {
    return &authService{
        tokenRepo:    tokenRepo,
        loginLogRepo: loginLogRepo,
        config:       cfg,
    }
}
```

## Interface Definitions

- Define interfaces in the consumer package, not the provider package
- Keep interfaces small and focused on specific behavior
- Interface names end with the type (e.g., `AuthService`, `ProjectRepository`)

## Error Handling

Use structured logging with the utils package:

```go
utils.Error("Operation failed", "user", username, "error", err)
utils.Info("Operation successful", "resource", resourceID)
utils.Warn("Unusual condition", "details", details)
```

## Constants and Enums

Use typed constants for enums:

```go
type GitCredentialType string

const (
    GitCredentialTypePassword GitCredentialType = "password"
    GitCredentialTypeToken    GitCredentialType = "token"
    GitCredentialTypeSSHKey   GitCredentialType = "ssh_key"
)
```

## Gin Handler Pattern

Follow this structure for all HTTP handlers:

```go
func (h *SomeHandlers) SomeHandler(c *gin.Context) {
    lang := middleware.GetLangFromContext(c)
    
    // 1. Bind request data
    var requestData struct {
        Field string `json:"field" binding:"required"`
    }
    
    if err := c.ShouldBindJSON(&requestData); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{
            "error": i18n.T(lang, "validation.invalid_request"),
        })
        return
    }
    
    // 2. Call service layer
    result, err := h.service.DoSomething(requestData.Field)
    if err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{
            "error": i18n.T(lang, "common.internal_error"),
        })
        return
    }
    
    // 3. Return response
    c.JSON(http.StatusOK, result)
}
```
