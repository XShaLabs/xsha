---
globs: *.go
---
# Go Coding Standards for XSHA

## Package Organization
- Follow the established package structure in [backend/](mdc:backend/)
- Each layer has its own package: handlers, services, repository, middleware
- Import paths use the module name: `xsha-backend/handlers`, `xsha-backend/services`

## Naming Conventions
- Use CamelCase for exported functions and types
- Use camelCase for private functions and variables
- Struct names should be descriptive: `AuthHandlers`, `TaskService`, `ProjectRepository`
- Interface names should end with appropriate suffix: `AuthService`, `TaskRepository`

## Error Handling
- Always handle errors explicitly
- Use the established i18n error pattern from [backend/i18n/](mdc:backend/i18n/)
- Return errors in the standardized format: `gin.H{"error": i18n.T(lang, "error.key")}`
- Log errors using the utils logger: `utils.Error("message", "key", value)`

## Layer Architecture Patterns
Follow the established pattern in [backend/main.go](mdc:backend/main.go):

### Repository Pattern
```go
type TaskRepository interface {
    Create(task *models.Task) error
    GetByID(id uint) (*models.Task, error)
    // ... other methods
}
```

### Service Pattern
```go
type TaskService struct {
    taskRepo    repository.TaskRepository
    projectRepo repository.ProjectRepository
    // dependencies injection
}
```

### Handler Pattern
```go
func (h *TaskHandlers) CreateTask(c *gin.Context) {
    lang := middleware.GetLangFromContext(c)
    // validate input
    // call service
    // return response
}
```

## Database Patterns
- Use GORM for all database operations
- Follow the model structure in [backend/database/models.go](mdc:backend/database/models.go)
- Always use transactions for complex operations
- Include timestamps: `CreatedAt`, `UpdatedAt`, `DeletedAt` for soft deletes

## Dependency Injection
- Inject dependencies through constructors like `NewTaskService()`
- Initialize all dependencies in [backend/main.go](mdc:backend/main.go)
- Pass database connection to repositories, repositories to services, services to handlers

## Documentation
- Use Swagger annotations for all API endpoints
- Follow the pattern established in [backend/handlers/auth.go](mdc:backend/handlers/auth.go)
- Include proper HTTP status codes and response types