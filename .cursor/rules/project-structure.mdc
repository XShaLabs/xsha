---
alwaysApply: true
---
# XSHA Project Structure Guide

XSHA is an AI-powered project task automation development platform with a clear full-stack architecture.

## Main Entry Points
- **Backend**: [backend/main.go](mdc:backend/main.go) - Go application with Gin framework
- **Frontend**: [frontend/src/main.tsx](mdc:frontend/src/main.tsx) - React application with TypeScript

## Backend Architecture (Go)
The backend follows a clean layered architecture:

### Core Layers
- **Handlers** ([backend/handlers/](mdc:backend/handlers/)) - HTTP request handling and validation
- **Services** ([backend/services/](mdc:backend/services/)) - Business logic implementation
- **Repository** ([backend/repository/](mdc:backend/repository/)) - Data access layer
- **Database** ([backend/database/](mdc:backend/database/)) - Database models and migrations

### Supporting Modules
- **Middleware** ([backend/middleware/](mdc:backend/middleware/)) - Authentication, logging, i18n, rate limiting
- **Routes** ([backend/routes/routes.go](mdc:backend/routes/routes.go)) - API route definitions
- **Config** ([backend/config/config.go](mdc:backend/config/config.go)) - Application configuration
- **Utils** ([backend/utils/](mdc:backend/utils/)) - Utility functions
- **Scheduler** ([backend/scheduler/](mdc:backend/scheduler/)) - Task scheduling system
- **I18n** ([backend/i18n/](mdc:backend/i18n/)) - Internationalization support

## Frontend Architecture (React + TypeScript)
- **Components** ([frontend/src/components/](mdc:frontend/src/components/)) - Reusable UI components
- **Pages** ([frontend/src/pages/](mdc:frontend/src/pages/)) - Route-based page components
- **API Layer** ([frontend/src/lib/api/](mdc:frontend/src/lib/api/)) - Backend API integration
- **Types** ([frontend/src/types/](mdc:frontend/src/types/)) - TypeScript type definitions
- **Contexts** ([frontend/src/contexts/](mdc:frontend/src/contexts/)) - React context providers
- **I18n** ([frontend/src/i18n/](mdc:frontend/src/i18n/)) - Frontend internationalization

## Key Dependencies
- **Backend**: Gin (web framework), GORM (ORM), JWT (authentication)
- **Frontend**: React 19, TypeScript, Vite, shadcn/ui, Tailwind CSS
- **Database**: MySQL/SQLite support
- **Deployment**: Docker & Docker Compose

## Directory Navigation Tips
- Always respect the layered architecture when making changes
- API routes are defined in [backend/routes/routes.go](mdc:backend/routes/routes.go)
- Database models are in [backend/database/models.go](mdc:backend/database/models.go)
- Frontend API types are in [frontend/src/lib/api/types.ts](mdc:frontend/src/lib/api/types.ts)