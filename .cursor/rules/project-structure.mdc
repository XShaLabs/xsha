---
alwaysApply: true
---

# XSHA Project Structure Guide

XSHA is a task management platform with Git integration and Docker-based execution. The project follows a clean architecture pattern with clear separation of concerns.

## Project Layout

### Backend Structure (`backend/`)
- **[main.go](mdc:backend/main.go)** - Application entry point with dependency injection
- **[config/](mdc:backend/config/)** - Configuration management
- **[database/](mdc:backend/database/)** - Database connection and models
- **[handlers/](mdc:backend/handlers/)** - HTTP request handlers (controllers)
- **[services/](mdc:backend/services/)** - Business logic layer
- **[repository/](mdc:backend/repository/)** - Data access layer
- **[middleware/](mdc:backend/middleware/)** - HTTP middleware
- **[routes/](mdc:backend/routes/)** - Route definitions
- **[utils/](mdc:backend/utils/)** - Shared utilities
- **[i18n/](mdc:backend/i18n/)** - Internationalization support
- **[scheduler/](mdc:backend/scheduler/)** - Task scheduling system

### Frontend Structure (`frontend/`)
- **[src/](mdc:frontend/src/)** - Source code
  - **[components/](mdc:frontend/src/components/)** - Reusable UI components
  - **[pages/](mdc:frontend/src/pages/)** - Page components
  - **[hooks/](mdc:frontend/src/hooks/)** - Custom React hooks
  - **[contexts/](mdc:frontend/src/contexts/)** - React contexts
  - **[lib/](mdc:frontend/src/lib/)** - Utility libraries and API clients
  - **[types/](mdc:frontend/src/types/)** - TypeScript type definitions
  - **[i18n/](mdc:frontend/src/i18n/)** - Frontend internationalization

## Key Architectural Principles

1. **Clean Architecture**: Handlers → Services → Repositories → Database
2. **Dependency Injection**: All dependencies are injected in [main.go](mdc:backend/main.go)
3. **Type Safety**: Strong typing in both Go and TypeScript
4. **Separation of Concerns**: Clear boundaries between layers
5. **Component-Based UI**: Modular React components with shadcn/ui

## Core Entities

- **Projects**: Git repositories with credentials
- **Tasks**: Work items linked to projects
- **Conversations**: AI interactions for task execution
- **Environments**: Docker-based development environments
- **Credentials**: Git authentication management

Always follow the established patterns when adding new features.