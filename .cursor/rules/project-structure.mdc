---
alwaysApply: true
---

# Sleep0 Project Structure Guide

This is a full-stack Go + React application with clean architecture principles.

## Project Overview

**Backend**: Go with Gin framework using clean architecture (Repository → Service → Handler layers)  
**Frontend**: React + TypeScript with Vite, using shadcn/ui components  
**Database**: MySQL/SQLite with GORM ORM  
**Authentication**: JWT-based with blacklist support  
**Deployment**: Docker Compose with multi-service architecture  
**Features**: Project management, Git credentials, development environments, AI task automation

## Directory Structure

### Backend ([backend/](mdc:backend/))
```
backend/
├── main.go                   # Application entry point
├── config/config.go          # Environment configuration
├── database/                 # Database layer
│   ├── database.go          # Connection management  
│   └── models.go            # GORM model definitions
├── repository/              # Data access layer (interfaces + implementations)
├── services/                # Business logic layer (interfaces + implementations)  
├── handlers/                # HTTP request handlers (API endpoints)
├── middleware/              # Gin middleware (auth, i18n, logging, etc.)
├── routes/routes.go         # Route registration and grouping
├── scheduler/               # Background task processing
├── utils/                   # Shared utilities (crypto, jwt, git, workspace)
└── i18n/                    # Internationalization support
```

### Frontend ([frontend/src/](mdc:frontend/src/))
```
frontend/src/
├── main.tsx                 # Application entry point
├── App.tsx                  # Main app with routing
├── components/              # Reusable React components
│   ├── ui/                 # shadcn/ui base components
│   └── [Feature]Form.tsx   # Feature-specific components
├── pages/                   # Page components organized by feature
│   ├── [feature]/          # Feature-specific page groups
├── lib/                     # Utilities and configurations
│   ├── api/                # API client functions
│   └── utils.ts            # Shared utilities
├── contexts/               # React contexts (auth, theme)
├── hooks/                  # Custom React hooks  
├── types/                  # TypeScript type definitions
└── i18n/                   # Frontend internationalization
```

## Architecture Principles

1. **Clean Architecture**: Repository → Service → Handler layers with dependency injection
2. **Interface-Based Design**: All layers communicate through interfaces
3. **Feature Organization**: Code organized by business features, not technical layers
4. **Consistent Naming**: Use descriptive names following Go/TypeScript conventions
5. **Error Handling**: Structured error responses with i18n support
