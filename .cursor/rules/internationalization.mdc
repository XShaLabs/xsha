---
globs: backend/i18n/**/*.go,backend/i18n/**/*.json,frontend/src/i18n/**/*.ts,frontend/src/i18n/**/*.json
---
# Internationalization (i18n) Patterns

## Supported Languages
- **English (en-US)**: Default language
- **Chinese (zh-CN)**: Simplified Chinese support

## Backend Internationalization

### I18n Architecture
- **Helper Functions**: [backend/i18n/helper.go](mdc:backend/i18n/helper.go) and [backend/i18n/i18n.go](mdc:backend/i18n/i18n.go)
- **Language Detection**: [backend/middleware/i18n.go](mdc:backend/middleware/i18n.go)
- **Translation Files**: [backend/i18n/locales/](mdc:backend/i18n/locales/)

### Translation File Structure
Organize translations by domain in separate JSON files:
```
backend/i18n/locales/
├── en-US/
│   ├── auth.json
│   ├── errors.json
│   ├── tasks.json
│   └── projects.json
└── zh-CN/
    ├── auth.json
    ├── errors.json
    ├── tasks.json
    └── projects.json
```

### Translation Key Patterns
Use nested objects for logical grouping:
```json
{
  "auth": {
    "login": {
      "success": "Login successful",
      "failed": "Login failed",
      "invalid_credentials": "Invalid username or password"
    },
    "logout": {
      "success": "Logout successful"
    }
  },
  "validation": {
    "required": "This field is required",
    "invalid_email": "Please enter a valid email address",
    "min_length": "Minimum length is {{min}} characters"
  }
}
```

### Backend Usage Pattern
```go
import "xsha-backend/i18n"

func (h *AuthHandlers) LoginHandler(c *gin.Context) {
    lang := middleware.GetLangFromContext(c)
    
    // Success response
    c.JSON(http.StatusOK, gin.H{
        "message": i18n.T(lang, "auth.login.success"),
        "token": token,
    })
    
    // Error response
    c.JSON(http.StatusUnauthorized, gin.H{
        "error": i18n.T(lang, "auth.login.invalid_credentials"),
    })
}
```

### Language Detection
The i18n middleware automatically detects language from:
1. `Accept-Language` header
2. Query parameter `?lang=zh-CN`
3. Falls back to English (en-US)

## Frontend Internationalization

### I18n Setup
- **Configuration**: [frontend/src/i18n/index.ts](mdc:frontend/src/i18n/index.ts)
- **Translation Files**: [frontend/src/i18n/locales/](mdc:frontend/src/i18n/locales/)
- **Library**: react-i18next with i18next

### Translation File Organization
Mirror the backend structure for consistency:
```
frontend/src/i18n/locales/
├── en-US/
│   ├── common.json
│   ├── auth.json
│   ├── tasks.json
│   ├── projects.json
│   └── navigation.json
└── zh-CN/
    ├── common.json
    ├── auth.json
    ├── tasks.json
    ├── projects.json
    └── navigation.json
```

### Frontend Usage Pattern
```tsx
import { useTranslation } from 'react-i18next';

export default function TaskForm() {
  const { t } = useTranslation();
  
  return (
    <form>
      <h1>{t('tasks.create.title')}</h1>
      <label>{t('tasks.form.title')}</label>
      <input 
        placeholder={t('tasks.form.title_placeholder')} 
      />
      <button>{t('common.submit')}</button>
    </form>
  );
}
```

### Language Switching
```tsx
import { useTranslation } from 'react-i18next';

export default function LanguageSwitcher() {
  const { i18n } = useTranslation();
  
  const changeLanguage = (lang: string) => {
    i18n.changeLanguage(lang);
  };
  
  return (
    <select 
      value={i18n.language} 
      onChange={(e) => changeLanguage(e.target.value)}
    >
      <option value="en-US">English</option>
      <option value="zh-CN">中文</option>
    </select>
  );
}
```

## Translation Key Conventions

### Naming Patterns
- Use dot notation: `domain.action.status`
- Be descriptive but concise: `tasks.create.success`
- Group related translations: `auth.login.*`, `auth.logout.*`

### Common Translation Categories
```json
{
  "common": {
    "submit": "Submit",
    "cancel": "Cancel",
    "save": "Save", 
    "delete": "Delete",
    "edit": "Edit",
    "loading": "Loading...",
    "error": "Error",
    "success": "Success"
  },
  "navigation": {
    "dashboard": "Dashboard",
    "tasks": "Tasks",
    "projects": "Projects",
    "settings": "Settings"
  },
  "actions": {
    "create": "Create",
    "update": "Update",
    "delete": "Delete",
    "view": "View"
  }
}
```

### Parameterized Translations
Support variable substitution:
```json
{
  "task": {
    "created": "Task '{{title}}' was created successfully",
    "due_in": "Due in {{days}} days",
    "assigned_to": "Assigned to {{user}}"
  }
}
```

Usage:
```tsx
// Frontend
t('task.created', { title: 'My Task' })

// Backend (if supporting parameters)
i18n.T(lang, "task.created", map[string]interface{}{
    "title": task.Title,
})
```

## Best Practices

### Translation Management
- Keep translations synchronized between frontend and backend
- Use consistent key naming across both applications
- Regularly audit for missing translations
- Consider using translation management tools for larger projects

### Content Guidelines
- Write clear, concise messages
- Avoid technical jargon in user-facing messages
- Consider cultural context for Chinese translations
- Test translations in context, not isolation

### Performance Considerations
- Load only necessary translation files
- Implement lazy loading for large translation sets
- Cache translations appropriately
- Consider CDN for translation assets

### Development Workflow
1. Add English translation first
2. Use translation keys in code immediately
3. Add Chinese translation
4. Test both languages thoroughly
5. Update translation keys if message changes

### Error Message Translations
- Provide helpful, actionable error messages
- Avoid exposing technical details to users
- Include suggestions for fixing issues when possible
- Maintain consistent tone across all error messages