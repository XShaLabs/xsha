---
description: "Internationalization (i18n) patterns and guidelines"
---

# Internationalization (i18n)

XSHA supports multiple languages with comprehensive i18n implementation in both backend and frontend.

## Backend Internationalization

### I18n Helper
Located in [i18n/helper.go](mdc:backend/i18n/helper.go) and [i18n/i18n.go](mdc:backend/i18n/i18n.go):

```go
type I18nHelper struct {
    translations map[string]map[string]interface{}
}

func (h *I18nHelper) Translate(c *gin.Context, key string, args map[string]interface{}) string {
    lang := h.getLanguageFromContext(c)
    
    // Get translation from loaded translations
    if translation, exists := h.getTranslation(lang, key); exists {
        return h.interpolate(translation, args)
    }
    
    // Fallback to English
    if lang != "en-US" {
        if translation, exists := h.getTranslation("en-US", key); exists {
            return h.interpolate(translation, args)
        }
    }
    
    // Return key if no translation found
    return key
}

func (h *I18nHelper) getLanguageFromContext(c *gin.Context) string {
    // Check Accept-Language header
    acceptLang := c.GetHeader("Accept-Language")
    if acceptLang != "" {
        // Parse and return preferred language
        return parseAcceptLanguage(acceptLang)
    }
    
    // Default to English
    return "en-US"
}
```

### Translation Files Structure
Located in [i18n/locales/](mdc:backend/i18n/locales/):

```json
// i18n/locales/en-US.json
{
  "auth": {
    "invalid_credentials": "Invalid username or password",
    "token_expired": "Token has expired",
    "login_successful": "Login successful",
    "logout_successful": "Logout successful"
  },
  "validation": {
    "required": "{{field}} is required",
    "invalid_format": "{{field}} has invalid format",
    "too_long": "{{field}} is too long (maximum {{max}} characters)"
  },
  "project": {
    "created_successfully": "Project '{{name}}' created successfully",
    "updated_successfully": "Project updated successfully",
    "deleted_successfully": "Project deleted successfully",
    "not_found": "Project not found",
    "name_exists": "Project with name '{{name}}' already exists"
  }
}

// i18n/locales/zh-CN.json
{
  "auth": {
    "invalid_credentials": "用户名或密码无效",
    "token_expired": "令牌已过期",
    "login_successful": "登录成功",
    "logout_successful": "退出成功"
  },
  "validation": {
    "required": "{{field}} 是必填项",
    "invalid_format": "{{field}} 格式无效",
    "too_long": "{{field}} 太长（最多 {{max}} 个字符）"
  },
  "project": {
    "created_successfully": "项目 '{{name}}' 创建成功",
    "updated_successfully": "项目更新成功",
    "deleted_successfully": "项目删除成功",
    "not_found": "项目未找到",
    "name_exists": "名为 '{{name}}' 的项目已存在"
  }
}
```

### I18n Middleware
Located in [middleware/i18n.go](mdc:backend/middleware/i18n.go):

```go
func I18nMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        // Set up i18n context
        lang := getPreferredLanguage(c)
        c.Set("language", lang)
        c.Next()
    }
}

func getPreferredLanguage(c *gin.Context) string {
    // Check Accept-Language header
    acceptLang := c.GetHeader("Accept-Language")
    
    // Parse and find best match
    languages := []string{"en-US", "zh-CN"}
    return findBestLanguageMatch(acceptLang, languages)
}
```

### Usage in Handlers
```go
func (h *ProjectHandlers) CreateProject(c *gin.Context) {
    // ... validation and business logic ...
    
    // Success response with translated message
    message := h.i18n.Translate(c, "project.created_successfully", map[string]interface{}{
        "name": project.Name,
    })
    
    c.JSON(http.StatusCreated, gin.H{
        "data": project,
        "message": message,
    })
}

// Error handling with i18n
func (h *ProjectHandlers) handleError(c *gin.Context, err error) {
    var i18nErr *errors.I18nError
    if errors.As(err, &i18nErr) {
        message := h.i18n.Translate(c, i18nErr.Key, i18nErr.Args)
        c.JSON(getStatusCode(i18nErr.Code), gin.H{
            "error": message,
            "code": i18nErr.Code,
        })
        return
    }
    
    // Generic error
    message := h.i18n.Translate(c, "errors.internal_server_error", nil)
    c.JSON(http.StatusInternalServerError, gin.H{
        "error": message,
    })
}
```

## Frontend Internationalization

### React i18next Setup
Located in [i18n/index.ts](mdc:frontend/src/i18n/index.ts):

```tsx
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';

// Import translation files
import enUS from './locales/en-US';
import zhCN from './locales/zh-CN';

const resources = {
  'en-US': enUS,
  'zh-CN': zhCN,
};

i18n
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    fallbackLng: 'en-US',
    debug: process.env.NODE_ENV === 'development',
    
    interpolation: {
      escapeValue: false, // React already escapes
    },
    
    detection: {
      order: ['localStorage', 'navigator', 'htmlTag'],
      lookupLocalStorage: 'i18nextLng',
    },
  });

export default i18n;
```

### Translation File Structure
Frontend translations in [i18n/locales/](mdc:frontend/src/i18n/locales/):

```json
// frontend/src/i18n/locales/en-US/common.json
{
  "actions": {
    "create": "Create",
    "edit": "Edit",
    "delete": "Delete",
    "save": "Save",
    "cancel": "Cancel",
    "confirm": "Confirm",
    "submit": "Submit"
  },
  "status": {
    "loading": "Loading...",
    "success": "Success",
    "error": "Error",
    "pending": "Pending"
  },
  "navigation": {
    "dashboard": "Dashboard",
    "projects": "Projects",
    "tasks": "Tasks",
    "settings": "Settings"
  }
}

// frontend/src/i18n/locales/en-US/projects.json
{
  "title": "Projects",
  "create_project": "Create Project",
  "project_name": "Project Name",
  "project_description": "Project Description",
  "repository_url": "Repository URL",
  "messages": {
    "created_successfully": "Project created successfully",
    "updated_successfully": "Project updated successfully",
    "deleted_successfully": "Project deleted successfully"
  },
  "errors": {
    "name_required": "Project name is required",
    "invalid_url": "Invalid repository URL",
    "create_failed": "Failed to create project"
  }
}

// frontend/src/i18n/locales/en-US/index.ts
import common from './common.json';
import projects from './projects.json';
import tasks from './tasks.json';
// ... other namespaces

export default {
  common,
  projects,
  tasks,
  // ... other namespaces
};
```

### Using Translations in Components
```tsx
import { useTranslation } from 'react-i18next';

function ProjectForm() {
  const { t } = useTranslation('projects');
  
  return (
    <form>
      <h2>{t('create_project')}</h2>
      
      <Input
        label={t('project_name')}
        placeholder={t('project_name')}
        required
      />
      
      <Textarea
        label={t('project_description')}
        placeholder={t('project_description')}
      />
      
      <Button type="submit">
        {t('common:actions.create')}
      </Button>
    </form>
  );
}

// With interpolation
function TaskCard({ task }: { task: Task }) {
  const { t } = useTranslation('tasks');
  
  return (
    <Card>
      <CardHeader>
        <CardTitle>{task.title}</CardTitle>
        <CardDescription>
          {t('created_by', { name: task.created_by })}
        </CardDescription>
      </CardHeader>
    </Card>
  );
}
```

### Dynamic Language Switching
```tsx
// components/LanguageSwitcher.tsx
function LanguageSwitcher() {
  const { i18n } = useTranslation();
  
  const languages = [
    { code: 'en-US', name: 'English' },
    { code: 'zh-CN', name: '中文' },
  ];
  
  const handleLanguageChange = (languageCode: string) => {
    i18n.changeLanguage(languageCode);
  };
  
  return (
    <Select value={i18n.language} onValueChange={handleLanguageChange}>
      <SelectTrigger>
        <SelectValue />
      </SelectTrigger>
      <SelectContent>
        {languages.map((lang) => (
          <SelectItem key={lang.code} value={lang.code}>
            {lang.name}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
}
```

## Translation Guidelines

### Naming Conventions
```
// Namespace organization
common.json          - Common UI elements
navigation.json      - Navigation and menu items
auth.json           - Authentication related
projects.json       - Project management
tasks.json          - Task management
errors.json         - Error messages
api.json            - API response messages

// Key naming patterns
actions.create      - UI actions
messages.success    - Success messages
errors.validation   - Error messages
labels.username     - Form labels
status.pending      - Status indicators
```

### Key Structure
```json
{
  "category": {
    "subcategory": {
      "specific_key": "Translation text"
    }
  },
  "validation": {
    "required": "{{field}} is required",
    "min_length": "{{field}} must be at least {{min}} characters",
    "max_length": "{{field}} cannot exceed {{max}} characters"
  }
}
```

### Interpolation Best Practices
```tsx
// Good: Use descriptive parameter names
t('user.welcome_message', { username: 'John', role: 'Admin' })
// "Welcome {{username}}! You are logged in as {{role}}"

// Good: Pluralization
t('task.count', { count: 5 })
// "{{count}} task" / "{{count}} tasks"

// Good: Date formatting
t('task.due_date', { date: formatDate(dueDate) })
// "Due: {{date}}"
```

### Missing Translation Handling
```tsx
// Custom hook for safe translations
function useSafeTranslation(namespace?: string) {
  const { t, ready } = useTranslation(namespace);
  
  const safeT = (key: string, options?: any) => {
    if (!ready) return key;
    
    const translation = t(key, options);
    
    // If translation equals key, it means no translation was found
    if (translation === key) {
      console.warn(`Missing translation for key: ${key}`);
      // Return a user-friendly fallback
      return key.split('.').pop()?.replace(/_/g, ' ') || key;
    }
    
    return translation;
  };
  
  return { t: safeT, ready };
}
```

## Development Workflow

### Adding New Translations
1. Add the key to all language files
2. Use descriptive, hierarchical keys
3. Include interpolation parameters where needed
4. Test with different languages

### Translation Validation
- Use scripts to check for missing translations
- Validate interpolation parameters
- Check for unused translation keys

```php
// scripts/check_unused_i18n_frontend.php
// scripts/check_unused_i18n_backend.php
```

Always ensure complete translation coverage and consistent key naming across languages.