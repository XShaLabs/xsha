---
globs: backend/handlers/*.go,backend/routes/*.go
---
# API Conventions for XSHA

## Base Structure
- All API routes are prefixed with `/api/v1`
- Authentication endpoint: `/api/v1/auth/login` (no auth required)
- All other endpoints require JWT authentication
- Health check: `/health` (no auth required)
- API documentation: `/swagger/*` (accessible without auth)

## Route Organization
Routes are organized by domain in [backend/routes/routes.go](mdc:backend/routes/routes.go):
- `/api/v1/auth/*` - Authentication routes
- `/api/v1/admin/*` - Admin-only operations
- `/api/v1/git-credentials/*` - Git credential management
- `/api/v1/projects/*` - Project management
- `/api/v1/dev-environments/*` - Development environment management
- `/api/v1/tasks/*` - Task management

## Request/Response Patterns

### Standard Response Format
```go
// Success response
c.JSON(http.StatusOK, responseData)

// Error response
c.JSON(http.StatusBadRequest, gin.H{
    "error": i18n.T(lang, "error.message.key")
})
```

### Pagination
For list endpoints, use query parameters:
- `page` - Page number (default: 1)
- `pageSize` - Items per page (default: 10)
- `keyword` - Search term (optional)

### Standard HTTP Status Codes
- `200` - Success
- `201` - Created
- `400` - Bad Request (validation errors)
- `401` - Unauthorized
- `403` - Forbidden
- `404` - Not Found
- `429` - Too Many Requests (rate limiting)
- `500` - Internal Server Error

## Authentication
- Use JWT tokens in Authorization header: `Bearer <token>`
- Tokens are managed by the AuthService
- Rate limiting applied to login endpoint
- Logout adds token to blacklist

## Swagger Documentation
All handlers must include Swagger annotations:
```go
// @Summary Brief description
// @Description Detailed description
// @Tags Category
// @Accept json
// @Produce json
// @Param paramName body/query/path Type true "Description"
// @Success 200 {object} ResponseType "Success description"
// @Failure 400 {object} object{error=string} "Error description"
// @Router /endpoint [method]
```

## Middleware Chain
Standard middleware applied to all authenticated routes:
1. I18n middleware (language detection)
2. Error handler middleware
3. Authentication middleware
4. Operation logging middleware (for admin actions)

## Input Validation
- Use Gin's `ShouldBindJSON()` for request body validation
- Define validation structs with `binding` tags
- Return localized error messages for validation failures