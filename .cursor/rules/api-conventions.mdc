# API Conventions and REST Patterns

RESTful API design patterns used in the XSHA backend.

## URL Structure and Routing

**Base Path**: All APIs use `/api/v1` prefix

**Resource Patterns** ([backend/routes/routes.go](mdc:backend/routes/routes.go)):
```go
// Resource groups
authGroup := v1.Group("/auth")
projectsGroup := v1.Group("/projects") 
credentialsGroup := v1.Group("/git-credentials")
devEnvGroup := v1.Group("/dev-environments")
tasksGroup := v1.Group("/tasks")
```

**Standard REST Endpoints**:
- `GET /api/v1/projects` - List resources (with pagination)
- `POST /api/v1/projects` - Create resource
- `GET /api/v1/projects/:id` - Get single resource
- `PUT /api/v1/projects/:id` - Update resource
- `DELETE /api/v1/projects/:id` - Delete resource

**Nested Resources** for hierarchical data:
```go
// Tasks belong to projects
projectGroup.GET("/:projectId/tasks", handler.ListTasks)
projectGroup.POST("/:projectId/tasks", handler.CreateTask)
```

## Request/Response Patterns

**Request Binding**: Use struct tags for validation:
```go
type CreateProjectRequest struct {
    Name        string              `json:"name" binding:"required,min=1,max=100"`
    Description string              `json:"description"`
    RepoURL     string              `json:"repo_url" binding:"required,url"`
    Protocol    GitProtocolType     `json:"protocol" binding:"required,oneof=https ssh"`
}
```

**Response Format**: Consistent JSON structure:
```go
// Success - Single resource
{
    "id": 1,
    "name": "project-name",
    "created_at": "2024-01-01T00:00:00Z"
}

// Success - List with pagination
{
    "items": [...],
    "total": 42,
    "page": 1,
    "page_size": 20
}

// Error response
{
    "error": "Validation failed"
}
```

## Swagger Documentation

**Handler Documentation**: Include comprehensive Swagger comments:
```go
// CreateProject creates a new project
// @Summary Create project
// @Description Create a new Git repository project with credentials
// @Tags Projects
// @Accept json
// @Produce json
// @Param projectData body CreateProjectRequest true "Project data"
// @Success 201 {object} database.Project "Created project"
// @Failure 400 {object} object{error=string} "Validation error"
// @Failure 401 {object} object{error=string} "Unauthorized"
// @Security BearerAuth
// @Router /projects [post]
func (h *ProjectHandlers) CreateProject(c *gin.Context) {
    // Implementation
}
```

**Security**: Use `@Security BearerAuth` for protected endpoints

## Authentication and Authorization

**JWT Header**: `Authorization: Bearer <token>`

**Middleware Application**:
```go
// Protected routes
protected := v1.Group("/")
protected.Use(middleware.AuthMiddleware(authService))
{
    protected.GET("/projects", handlers.ListProjects)
    // ... other protected routes
}
```

**User Context**: Extract authenticated user:
```go
username, exists := c.Get("username")
if !exists {
    c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
    return
}
```

## Error Handling

**HTTP Status Codes**:
- `200` - Success
- `201` - Created 
- `400` - Bad Request (validation errors)
- `401` - Unauthorized
- `403` - Forbidden
- `404` - Not Found
- `429` - Too Many Requests (rate limiting)
- `500` - Internal Server Error

**Error Response Structure**:
```go
// Simple error
c.JSON(http.StatusBadRequest, gin.H{
    "error": i18n.T(lang, "validation.invalid_request"),
})

// Error with details
c.JSON(http.StatusBadRequest, gin.H{
    "error": i18n.T(lang, "validation.invalid_format"),
    "details": err.Error(),
})
```

## Internationalization Support

**Language Header**: `Accept-Language: zh-CN` or `Accept-Language: en-US`

**Message Keys**: Use dot notation:
- `auth.login_failed`
- `validation.invalid_request`
- `common.internal_error`

## Pagination and Filtering

**Query Parameters**:
```go
page := c.DefaultQuery("page", "1")
pageSize := c.DefaultQuery("page_size", "20")
status := c.Query("status") // Optional filter
```

**Response**: Include pagination metadata:
```go
c.JSON(http.StatusOK, gin.H{
    "items":     items,
    "total":     total,
    "page":      page,
    "page_size": pageSize,
})
```
---
globs: backend/handlers/**,backend/routes/**
---
