---
description: "API design and convention guidelines"
---

# API Conventions

Follow these conventions for consistent API design across XSHA.

## URL Structure

### Base Path
- All APIs use `/api/v1` prefix
- Example: `/api/v1/projects`, `/api/v1/tasks`

### Resource Naming
- Use plural nouns for collections: `/projects`, `/tasks`, `/credentials`
- Use specific IDs for individual resources: `/projects/123`, `/tasks/456`
- Use descriptive action names: `/projects/123/kanban`, `/tasks/123/git-diff`

### Route Examples from [routes/routes.go](mdc:backend/routes/routes.go)
```go
// Collections
projects.GET("", projectHandlers.ListProjects)
projects.POST("", projectHandlers.CreateProject)

// Individual resources
projects.GET("/:id", projectHandlers.GetProject)
projects.PUT("/:id", projectHandlers.UpdateProject)
projects.DELETE("/:id", projectHandlers.DeleteProject)

// Nested resources and actions
projects.GET("/:id/kanban", taskHandlers.GetKanbanTasks)
tasks.GET("/:id/git-diff", taskHandlers.GetTaskGitDiff)
tasks.POST("/:id/push", taskHandlers.PushTaskBranch)
```

## HTTP Methods

- **GET**: Retrieve data (idempotent)
- **POST**: Create new resources or actions
- **PUT**: Update/replace entire resource (idempotent)
- **PATCH**: Partial updates
- **DELETE**: Remove resources (idempotent)

## Request/Response Format

### JSON Structure
```json
// Success Response
{
  "data": { /* resource data */ },
  "message": "Operation successful"
}

// Error Response
{
  "error": "Error message",
  "details": "Additional error details"
}

// List Response
{
  "data": [/* array of resources */],
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 100,
    "pages": 5
  }
}
```

### Status Codes
- **200**: OK (successful GET, PUT)
- **201**: Created (successful POST)
- **204**: No Content (successful DELETE)
- **400**: Bad Request (validation errors)
- **401**: Unauthorized (authentication required)
- **403**: Forbidden (insufficient permissions)
- **404**: Not Found (resource doesn't exist)
- **409**: Conflict (resource already exists)
- **422**: Unprocessable Entity (validation failed)
- **500**: Internal Server Error

## Authentication

### JWT Bearer Token
```http
Authorization: Bearer <jwt_token>
```

### Authentication Routes
- `POST /api/v1/auth/login` - Login and get token
- `POST /api/v1/auth/logout` - Logout and blacklist token
- `GET /api/v1/user/current` - Get current user info

## Pagination

### Query Parameters
```
GET /api/v1/tasks?page=1&limit=20&sort=created_at&order=desc
```

### Response Format
```json
{
  "data": [/* results */],
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 150,
    "pages": 8,
    "has_next": true,
    "has_prev": false
  }
}
```

## Filtering and Sorting

### Query Parameters
```
GET /api/v1/tasks?status=in_progress&project_id=123&created_by=admin
GET /api/v1/projects?search=frontend&sort=name&order=asc
```

### Date Filtering
```
GET /api/v1/tasks?start_date=2024-01-01&end_date=2024-01-31
```

## Error Handling

### Validation Errors
```json
{
  "error": "Validation failed",
  "details": {
    "name": ["Name is required"],
    "email": ["Email format is invalid"]
  }
}
```

### Business Logic Errors
```json
{
  "error": "Cannot delete project with active tasks",
  "code": "PROJECT_HAS_ACTIVE_TASKS"
}
```

## API Documentation

- Use Swagger/OpenAPI documentation
- Access at `/swagger/index.html`
- Document all endpoints with examples
- Include authentication requirements

### Swagger Annotations Example
```go
// CreateProject godoc
// @Summary Create a new project
// @Description Create a new project with the provided details
// @Tags projects
// @Accept json
// @Produce json
// @Param project body CreateProjectRequest true "Project details"
// @Success 201 {object} Project
// @Failure 400 {object} ErrorResponse
// @Failure 401 {object} ErrorResponse
// @Security BearerAuth
// @Router /api/v1/projects [post]
func (h *ProjectHandlers) CreateProject(c *gin.Context) {
    // Implementation
}
```

## Internationalization

### Accept-Language Header
```http
Accept-Language: en-US,zh-CN;q=0.9
```

### Error Messages
- All error messages support i18n
- Use translation keys in responses
- Fallback to English for missing translations

## Rate Limiting

### Login Endpoint
- Special rate limiting for `/api/v1/auth/login`
- Configurable limits to prevent brute force attacks

### General Endpoints
- Global rate limiting per IP/user
- Configurable limits per endpoint

## Versioning

- Use URL versioning: `/api/v1/`, `/api/v2/`
- Maintain backward compatibility when possible
- Deprecation notices in response headers

```http
X-API-Deprecation-Warning: This endpoint will be deprecated in v2
X-API-Sunset-Date: 2024-12-31
```

Always follow these conventions to ensure consistent API behavior across the platform.