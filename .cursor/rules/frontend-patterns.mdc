# Frontend Patterns and Conventions

React + TypeScript patterns used in the Sleep0 frontend application.

## Project Structure and Organization

**Component Organization** ([frontend/src/components/](mdc:frontend/src/components/)):
```
components/
├── ui/                     # shadcn/ui base components
│   ├── button.tsx
│   ├── input.tsx
│   └── table.tsx
├── Layout.tsx              # Main layout wrapper
├── ProtectedRoute.tsx      # Route authentication guard
├── [Feature]Form.tsx       # Feature-specific forms
├── [Feature]List.tsx       # Feature-specific lists
└── theme-provider.tsx      # Theme context provider
```

**Page Organization** ([frontend/src/pages/](mdc:frontend/src/pages/)):
```
pages/
├── LoginPage.tsx           # Authentication page
├── DashboardPage.tsx       # Main dashboard
└── [feature]/              # Feature-grouped pages
    ├── [Feature]ListPage.tsx
    ├── [Feature]CreatePage.tsx
    └── [Feature]EditPage.tsx
```

## Component Patterns

### Form Components

**Standard Form Structure**:
```typescript
interface FormData {
    name: string;
    description: string;
}

export default function ProjectForm({ 
    initialData, 
    onSubmit, 
    isLoading 
}: {
    initialData?: Partial<FormData>;
    onSubmit: (data: FormData) => Promise<void>;
    isLoading?: boolean;
}) {
    const { t } = useTranslation();
    const [formData, setFormData] = useState<FormData>({
        name: initialData?.name || '',
        description: initialData?.description || '',
    });

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
            await onSubmit(formData);
        } catch (error) {
            // Error handling in parent component
        }
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            {/* Form fields */}
        </form>
    );
}
```

### List Components

**Standard List with Pagination**:
```typescript
export default function ProjectList() {
    const { t } = useTranslation();
    const [projects, setProjects] = useState<Project[]>([]);
    const [loading, setLoading] = useState(true);
    const [pagination, setPagination] = useState({
        page: 1,
        pageSize: 20,
        total: 0,
    });

    const fetchProjects = useCallback(async () => {
        try {
            setLoading(true);
            const response = await api.getProjects(pagination.page, pagination.pageSize);
            setProjects(response.items);
            setPagination(prev => ({ ...prev, total: response.total }));
        } catch (error) {
            toast.error(t('errors.loadFailed'));
        } finally {
            setLoading(false);
        }
    }, [pagination.page, pagination.pageSize, t]);

    useEffect(() => {
        fetchProjects();
    }, [fetchProjects]);

    return (
        <div>
            {/* List rendering with loading states */}
        </div>
    );
}
```

## Routing and Navigation

### Protected Routes ([frontend/src/components/ProtectedRoute.tsx](mdc:frontend/src/components/ProtectedRoute.tsx))

```typescript
export const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const { isAuthenticated, isLoading } = useAuth();

    if (isLoading) {
        return <div>Loading...</div>;
    }

    if (!isAuthenticated) {
        return <Navigate to="/login" replace />;
    }

    return <>{children}</>;
};
```

### Page Structure Pattern

**Consistent Page Layout**:
```typescript
export default function ProjectListPage() {
    // Set page title
    usePageTitle('pageTitle.projects');
    
    const { t } = useTranslation();
    const navigate = useNavigate();

    return (
        <div className="space-y-6">
            {/* Page header */}
            <div className="flex justify-between items-center">
                <h1 className="text-2xl font-bold">{t('projects.title')}</h1>
                <Button onClick={() => navigate('/projects/create')}>
                    {t('projects.create')}
                </Button>
            </div>

            {/* Page content */}
            <ProjectList />
        </div>
    );
}
```

## State Management

### Context Patterns ([frontend/src/contexts/](mdc:frontend/src/contexts/))

**Authentication Context**:
```typescript
interface AuthContextType {
    user: User | null;
    isAuthenticated: boolean;
    isLoading: boolean;
    login: (username: string, password: string) => Promise<void>;
    logout: () => void;
}

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [user, setUser] = useState<User | null>(null);
    const [isLoading, setIsLoading] = useState(true);

    // Auth logic implementation...

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
};
```

### Custom Hooks ([frontend/src/hooks/](mdc:frontend/src/hooks/))

**Page Title Hook**:
```typescript
export const usePageTitle = (titleKey: string) => {
    const { t } = useTranslation();
    
    useEffect(() => {
        document.title = `${t(titleKey)} - Sleep0`;
    }, [titleKey, t]);
};
```

## API Integration

### Type-Safe API Calls ([frontend/src/lib/api/](mdc:frontend/src/lib/api/))

**Feature-Specific API Modules**:
```typescript
// projects.ts
export const projectsApi = {
    async getProjects(page: number, pageSize: number): Promise<PaginatedResponse<Project>> {
        return request<PaginatedResponse<Project>>(
            `/projects?page=${page}&page_size=${pageSize}`
        );
    },

    async createProject(data: CreateProjectRequest): Promise<Project> {
        return request<Project>('/projects', {
            method: 'POST',
            body: JSON.stringify(data),
        });
    },

    async updateProject(id: number, data: UpdateProjectRequest): Promise<Project> {
        return request<Project>(`/projects/${id}`, {
            method: 'PUT',
            body: JSON.stringify(data),
        });
    },
};
```

**API Index File** ([frontend/src/lib/api/index.ts](mdc:frontend/src/lib/api/index.ts)):
```typescript
export * from './auth';
export * from './projects';
export * from './git-credentials';
// ... other API modules

// Default export for convenience
export default {
    auth: authApi,
    projects: projectsApi,
    gitCredentials: gitCredentialsApi,
    // ... other APIs
};
```

## TypeScript Patterns

### Type Definitions ([frontend/src/types/](mdc:frontend/src/types/))

**Model Types**:
```typescript
export interface Project {
    id: number;
    name: string;
    description: string;
    repo_url: string;
    protocol: 'https' | 'ssh';
    created_at: string;
    updated_at: string;
    created_by: string;
}

export interface CreateProjectRequest {
    name: string;
    description?: string;
    repo_url: string;
    protocol: 'https' | 'ssh';
    credential_id?: number;
}
```

**Generic Response Types**:
```typescript
export interface PaginatedResponse<T> {
    items: T[];
    total: number;
    page: number;
    page_size: number;
}

export interface ApiErrorResponse {
    error: string;
    details?: string;
}
```

## Styling and UI

### Component Styling

**Tailwind CSS Classes**: Use utility-first approach with consistent spacing
**shadcn/ui Components**: Leverage pre-built, accessible components
**Theme Support**: Use CSS variables for light/dark theme switching

**Class Name Patterns**:
```typescript
// Layout
<div className="space-y-6">           // Vertical spacing
<div className="flex justify-between items-center"> // Flexbox layouts

// Components  
<Button variant="outline" size="sm">  // shadcn/ui variants
<Card className="p-6">               // Consistent padding
```

## Error Handling and Loading States

**Standard Loading Pattern**:
```typescript
const [loading, setLoading] = useState(false);

const handleOperation = async () => {
    try {
        setLoading(true);
        await api.operation();
        toast.success(t('operation.success'));
    } catch (error) {
        if (error instanceof ApiError) {
            toast.error(error.message);
        } else {
            toast.error(t('errors.unexpected'));
        }
    } finally {
        setLoading(false);
    }
};
```

**Conditional Rendering**:
```typescript
if (loading) return <LoadingSpinner />;
if (error) return <ErrorMessage error={error} />;
return <MainContent data={data} />;
```
---
globs: frontend/**/*.ts,frontend/**/*.tsx
---
