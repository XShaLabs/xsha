---
globs: frontend/src/**/*.tsx,frontend/src/**/*.ts
---
# Frontend Development Patterns for XSHA

## Technology Stack
- **Framework**: React 19 with TypeScript
- **Build Tool**: Vite for fast development and building
- **UI Library**: shadcn/ui components with Radix UI primitives
- **Styling**: Tailwind CSS for utility-first styling
- **Routing**: React Router DOM v7
- **State Management**: React Context for authentication, local state for components
- **Internationalization**: react-i18next for multi-language support

## Project Structure Patterns

### Component Organization
- **UI Components**: [frontend/src/components/ui/](mdc:frontend/src/components/ui/) - shadcn/ui components
- **Business Components**: [frontend/src/components/](mdc:frontend/src/components/) - Domain-specific components
- **Pages**: [frontend/src/pages/](mdc:frontend/src/pages/) - Route-based page components
- **Layouts**: Use consistent layout patterns with [frontend/src/components/Layout.tsx](mdc:frontend/src/components/Layout.tsx)

### File Naming Conventions
- Use PascalCase for component files: `TaskList.tsx`, `ProjectForm.tsx`
- Use camelCase for utility files: `usePageTitle.ts`, `api/index.ts`
- Page components end with `Page`: `TaskListPage.tsx`, `ProjectCreatePage.tsx`

## Component Patterns

### Page Component Structure
```tsx
import { useTranslation } from 'react-i18next';
import { usePageTitle } from '@/hooks/usePageTitle';

export default function TaskListPage() {
  const { t } = useTranslation();
  usePageTitle(t('tasks.list.title'));
  
  // Component logic
  
  return (
    <div className="container mx-auto p-6">
      {/* Page content */}
    </div>
  );
}
```

### Form Component Pattern
- Use shadcn/ui form components
- Implement proper validation with zod schemas
- Include loading states and error handling
- Follow the pattern in [frontend/src/components/TaskFormCreate.tsx](mdc:frontend/src/components/TaskFormCreate.tsx)

### List Component Pattern
- Implement pagination
- Include search/filter functionality
- Use shadcn/ui Table components
- Handle loading and empty states

## API Integration Patterns

### API Client Structure
- Centralized API functions in [frontend/src/lib/api/](mdc:frontend/src/lib/api/)
- Type-safe API calls with TypeScript interfaces
- Consistent error handling pattern
- Authentication headers automatically included

### API Call Pattern
```tsx
import { useState, useEffect } from 'react';
import { getTasks } from '@/lib/api/tasks';
import { Task } from '@/types/task';

export default function TaskList() {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  useEffect(() => {
    const fetchTasks = async () => {
      try {
        setLoading(true);
        const response = await getTasks();
        setTasks(response.data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
      } finally {
        setLoading(false);
      }
    };
    
    fetchTasks();
  }, []);
  
  // Render logic
}
```

## Type Definition Patterns

### API Response Types
- Define interfaces in [frontend/src/types/](mdc:frontend/src/types/)
- Match backend model structures
- Include optional fields appropriately
- Use union types for status enums

```typescript
export interface Task {
  id: number;
  title: string;
  description?: string;
  status: 'pending' | 'running' | 'completed' | 'failed';
  created_at: string;
  updated_at: string;
  user_id: number;
}

export interface TaskCreateRequest {
  title: string;
  description?: string;
  project_id: number;
}
```

## Styling Patterns

### Tailwind CSS Usage
- Use utility classes for consistent spacing and styling
- Follow responsive design patterns: `md:flex lg:grid-cols-3`
- Use semantic color classes: `bg-primary text-primary-foreground`
- Prefer Tailwind classes over custom CSS

### Component Styling
- Use shadcn/ui components for consistent design
- Apply proper hover and focus states
- Implement dark mode support with next-themes
- Use proper contrast ratios for accessibility

## State Management Patterns

### Authentication Context
- Use [frontend/src/contexts/AuthContext.tsx](mdc:frontend/src/contexts/AuthContext.tsx) for user state
- Provide login, logout, and user info throughout the app
- Handle token refresh automatically

### Local Component State
- Use `useState` for simple component state
- Use `useEffect` for side effects and API calls
- Consider `useReducer` for complex state logic

## Internationalization Patterns

### i18n Setup
- Configuration in [frontend/src/i18n/index.ts](mdc:frontend/src/i18n/index.ts)
- Translation files in [frontend/src/i18n/locales/](mdc:frontend/src/i18n/locales/)
- Support for English (en-US) and Chinese (zh-CN)

### Usage Pattern
```tsx
import { useTranslation } from 'react-i18next';

export default function Component() {
  const { t } = useTranslation();
  
  return (
    <div>
      <h1>{t('common.title')}</h1>
      <p>{t('component.description')}</p>
    </div>
  );
}
```

## Error Handling Patterns

### API Error Handling
- Standardized error responses from backend
- Display user-friendly error messages
- Use toast notifications for feedback
- Handle authentication errors with redirect

### Form Validation
- Use zod schemas for validation
- Display field-level error messages
- Provide real-time validation feedback
- Handle server-side validation errors

## Performance Optimization
- Use React.memo for expensive components
- Implement proper loading states
- Lazy load routes and components
- Optimize images and assets with Vite