# Docker Deployment Patterns

Multi-service containerized deployment for the XSHA application.

## Project Docker Architecture

**Service Composition** ([docker-compose.yml](mdc:docker-compose.yml)):
```yaml
services:
  app:           # Go backend application
  mysql:         # MySQL database
  phpmyadmin:    # Database administration (optional)
```

**Network Configuration**: All services communicate via `xsha-network` bridge network

## Application Container ([Dockerfile](mdc:Dockerfile))

### Multi-Stage Build Pattern

**Stage 1 - Build Backend**:
```dockerfile
FROM golang:1.21-alpine AS backend-builder
WORKDIR /app
COPY backend/ .
RUN go mod download
RUN go build -o main .
```

**Stage 2 - Build Frontend**:
```dockerfile  
FROM node:18-alpine AS frontend-builder
WORKDIR /app
COPY frontend/ .
RUN npm install && npm run build
```

**Stage 3 - Production Image**:
```dockerfile
FROM alpine:latest
RUN apk --no-cache add ca-certificates curl
WORKDIR /root/
COPY --from=backend-builder /app/main .
COPY --from=frontend-builder /app/dist ./static
```

### Container Optimization

**Alpine Linux**: Minimal base image for reduced attack surface
**Multi-stage**: Separate build and runtime environments
**Static Assets**: Frontend served by Go backend
**Health Checks**: Built-in health monitoring

## Service Configuration

### Backend Application Service

**Environment Variables**:
```yaml
environment:
  - XSHA_PORT=8080
  - XSHA_ENVIRONMENT=development
  - XSHA_DATABASE_TYPE=mysql
  - XSHA_MYSQL_DSN=root:password@tcp(mysql:3306)/xsha?charset=utf8mb4&parseTime=True&loc=Local
  - XSHA_WORKSPACE_BASE_DIR=/app/workspaces
```

**Volume Mounts**:
```yaml
volumes:
  - ./backend:/app:ro                     # Code mount (development)
  - /var/run/docker.sock:/var/run/docker.sock  # Docker-in-Docker
  - ./workspaces:/app/workspaces          # AI task workspaces
```

**Docker-in-Docker**: Access to host Docker daemon for AI task execution

### Database Service

**MySQL Configuration**:
```yaml
mysql:
  image: mysql:8.0
  environment:
    - MYSQL_ROOT_PASSWORD=password
    - MYSQL_DATABASE=xsha
    - MYSQL_USER=xsha  
    - MYSQL_PASSWORD=xshapass
  volumes:
    - mysql_data:/var/lib/mysql           # Persistent data
    - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql  # Initialization
```

**Health Check**:
```yaml
healthcheck:
  test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword"]
  interval: 10s
  timeout: 5s
  retries: 5
  start_period: 30s
```

## Development vs Production

### Development Configuration ([docker-compose.dev.yml](mdc:docker-compose.dev.yml))

**Code Mounting**: Live reload during development
**Debug Environment**: Verbose logging and debugging tools
**Port Exposure**: Direct access to all services

```yaml
# Override for development
services:
  app:
    build:
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend:/app:rw                 # Read-write for development
    environment:
      - XSHA_ENVIRONMENT=development
      - XSHA_LOG_LEVEL=debug
```

### Production Optimizations

**Image Size**: Multi-stage builds minimize final image
**Security**: Non-root user, minimal packages
**Performance**: Optimized Go binary, compressed assets
**Monitoring**: Health checks and restart policies

```yaml
restart: unless-stopped
healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
  interval: 30s
  timeout: 10s
  retries: 3
```

## AI Development Environment Containers

### Specialized AI Containers ([docker/](mdc:docker/))

**Claude Code Environment** ([docker/Dockerfile.claude-code](mdc:docker/Dockerfile.claude-code)):
- Pre-configured development environment for AI tasks
- Includes necessary tools and dependencies
- Sandboxed execution environment

**Gemini CLI Environment** ([docker/Dockerfile.gemini-cli](mdc:docker/Dockerfile.gemini-cli)):
- Command-line interface optimized for AI interactions
- Streamlined toolchain for rapid prototyping

**OpenCode Environment** ([docker/Dockerfile.opencode](mdc:docker/Dockerfile.opencode)):
- Open-source development environment
- Flexible configuration for various AI models

### Task Execution Pattern

**Container Lifecycle**:
1. Create task-specific container from base image
2. Mount project workspace into container
3. Execute AI-generated commands
4. Collect output and logs
5. Commit changes back to workspace
6. Clean up container resources

**Resource Limits**:
```yaml
# Applied dynamically during task execution
deploy:
  resources:
    limits:
      cpus: '1.0'
      memory: 1G
    reservations:
      cpus: '0.25'
      memory: 256M
```

## Networking and Security

### Network Isolation

**Internal Communication**: Services communicate via service names
**External Access**: Only necessary ports exposed to host
**Service Discovery**: Automatic via Docker Compose DNS

```yaml
networks:
  xsha-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
```

### Security Considerations

**Secret Management**: Environment variables for sensitive data
**User Permissions**: Non-root containers where possible  
**Network Policies**: Restricted inter-service communication
**Volume Security**: Read-only mounts for application code

## Deployment Commands

### Development Deployment

```bash
# Start all services
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d

# View logs
docker-compose logs -f app

# Rebuild after changes
docker-compose build app && docker-compose up -d app
```

### Production Deployment

```bash
# Production build and start
docker-compose -f docker-compose.yml up -d

# Update application
docker-compose pull && docker-compose up -d

# Scale services (if needed)
docker-compose up -d --scale app=2
```

### Maintenance Commands

```bash
# Database backup
docker-compose exec mysql mysqldump -u root -p xsha > backup.sql

# View service health
docker-compose ps

# Clean up resources
docker-compose down -v --remove-orphans
docker system prune -f
```

## Monitoring and Logging

### Health Monitoring

**Application Health Endpoint**: `/api/health` for container health checks
**Database Health**: MySQL ping for service readiness
**Dependency Checks**: Verify all required services are available

### Log Aggregation

**Centralized Logging**: All containers log to stdout/stderr
**Log Rotation**: Docker handles log file rotation
**Structured Logs**: JSON format for easy parsing

```yaml
logging:
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
```

## Performance and Scaling

### Horizontal Scaling

**Stateless Design**: Application containers can be scaled horizontally
**Load Balancing**: External load balancer for multiple app instances
**Database Scaling**: Single MySQL instance with potential for read replicas

### Resource Optimization

**Memory Limits**: Prevent containers from consuming excessive memory
**CPU Limits**: Ensure fair resource distribution
**Disk Usage**: Implement log rotation and temporary file cleanup

---
description: Docker deployment patterns and container orchestration
---
