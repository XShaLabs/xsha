---
globs: backend/**/*.go
---
# Backend Architecture Patterns

## Layered Architecture
XSHA follows a strict 3-layer architecture pattern:

### 1. Handler Layer ([backend/handlers/](mdc:backend/handlers/))
- **Responsibility**: HTTP request/response handling, input validation, response formatting
- **Pattern**: Each domain has its own handler struct (e.g., `AuthHandlers`, `TaskHandlers`)
- **Dependencies**: Only depends on Service layer
- **Example**: [backend/handlers/auth.go](mdc:backend/handlers/auth.go)

```go
type TaskHandlers struct {
    taskService services.TaskService
    // other service dependencies
}

func (h *TaskHandlers) CreateTask(c *gin.Context) {
    // 1. Get language for i18n
    // 2. Validate input
    // 3. Call service method
    // 4. Return formatted response
}
```

### 2. Service Layer ([backend/services/](mdc:backend/services/))
- **Responsibility**: Business logic, orchestration, validation
- **Pattern**: Interface-based design with concrete implementations
- **Dependencies**: Repository layer, other services, external APIs
- **Example**: [backend/services/auth.go](mdc:backend/services/auth.go)

```go
type TaskService interface {
    CreateTask(userID uint, req CreateTaskRequest) (*TaskResponse, error)
}

type taskService struct {
    taskRepo    repository.TaskRepository
    projectRepo repository.ProjectRepository
    // other dependencies
}
```

### 3. Repository Layer ([backend/repository/](mdc:backend/repository/))
- **Responsibility**: Data access, database operations, query logic
- **Pattern**: Interface-based with GORM implementations
- **Dependencies**: Only database connection

```go
type TaskRepository interface {
    Create(task *models.Task) error
    GetByID(id uint) (*models.Task, error)
    List(userID uint, filters TaskFilters) ([]*models.Task, error)
}
```

## Dependency Injection Pattern
All dependencies are injected through constructors in [backend/main.go](mdc:backend/main.go):

```go
// 1. Initialize repositories
taskRepo := repository.NewTaskRepository(db)

// 2. Initialize services (inject repositories)
taskService := services.NewTaskService(taskRepo, projectRepo)

// 3. Initialize handlers (inject services)
taskHandlers := handlers.NewTaskHandlers(taskService)
```

## Error Handling Patterns

### Service Layer Errors
- Return errors with context
- Use domain-specific error types when appropriate
- Log errors at service level for debugging

### Handler Layer Error Response
- Convert service errors to HTTP responses
- Use i18n for user-facing error messages
- Follow standard HTTP status codes

```go
if err != nil {
    utils.Error("Task creation failed", "error", err)
    c.JSON(http.StatusBadRequest, gin.H{
        "error": i18n.T(lang, "task.create.failed"),
    })
    return
}
```

## Configuration Management
- Centralized config in [backend/config/config.go](mdc:backend/config/config.go)
- Environment-based configuration
- Injected into services that need it

## Logging Patterns
- Use structured logging with [backend/utils/logger.go](mdc:backend/utils/logger.go)
- Include context like user ID, request ID when available
- Different log levels: Info, Error, Debug

## Database Transaction Patterns
- Use transactions for multi-table operations
- Repository layer handles transaction logic
- Service layer coordinates transaction boundaries

## Testing Patterns
- Mock interfaces at layer boundaries
- Test business logic in service layer
- Integration tests for repository layer
- HTTP tests for handler layer