---
globs: backend/**/*.go
---

# Go Backend Patterns

Follow these patterns when working with the XSHA backend.

## Clean Architecture Layers

### 1. Handlers (Controllers)
- Located in [handlers/](mdc:backend/handlers/)
- Handle HTTP requests and responses only
- Validate input and delegate to services
- Use standard HTTP status codes
- Example: [handlers/auth.go](mdc:backend/handlers/auth.go)

```go
func (h *AuthHandlers) LoginHandler(c *gin.Context) {
    var loginRequest LoginRequest
    if err := c.ShouldBindJSON(&loginRequest); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
        return
    }
    
    result, err := h.authService.Login(loginRequest.Username, loginRequest.Password)
    if err != nil {
        c.JSON(http.StatusUnauthorized, gin.H{"error": err.Error()})
        return
    }
    
    c.JSON(http.StatusOK, result)
}
```

### 2. Services (Business Logic)
- Located in [services/](mdc:backend/services/)
- Contain all business logic
- Return domain errors, not HTTP errors
- Use interfaces defined in [services/interfaces.go](mdc:backend/services/interfaces.go)

```go
type AuthService interface {
    Login(username, password string) (*LoginResponse, error)
    ValidateToken(token string) (*Claims, error)
}
```

### 3. Repositories (Data Access)
- Located in [repository/](mdc:backend/repository/)
- Handle database operations only
- Use GORM for ORM operations
- Implement interfaces defined in [repository/interfaces.go](mdc:backend/repository/interfaces.go)

```go
type UserRepository interface {
    FindByUsername(username string) (*database.User, error)
    Create(user *database.User) error
}
```

## Dependency Injection Pattern

All dependencies are injected in [main.go](mdc:backend/main.go):

```go
// Initialize repositories
userRepo := repository.NewUserRepository(db)

// Initialize services
authService := services.NewAuthService(userRepo, cfg)

// Initialize handlers
authHandlers := handlers.NewAuthHandlers(authService)
```

## Error Handling

- Use custom error types from [errors/](mdc:backend/errors/)
- Support i18n error messages
- Log errors with structured logging using [utils/logger.go](mdc:backend/utils/logger.go)

## Database Models

- All models are in [database/models.go](mdc:backend/database/models.go)
- Use GORM conventions
- Include standard fields: ID, CreatedAt, UpdatedAt, DeletedAt
- Use proper indexes and relationships

## Configuration

- Environment-based configuration in [config/config.go](mdc:backend/config/config.go)
- Use .env files for development
- All config values should have defaults

## Middleware

- Authentication: [middleware/auth.go](mdc:backend/middleware/auth.go)
- Logging: [middleware/logger.go](mdc:backend/middleware/logger.go)
- Error handling: [middleware/error.go](mdc:backend/middleware/error.go)
- I18n: [middleware/i18n.go](mdc:backend/middleware/i18n.go)

Always follow these patterns to maintain consistency across the codebase.