# Backend Architecture Patterns

The Sleep0 backend follows clean architecture with strict layer separation.

## Layer Structure

```
Handlers → Services → Repository → Database
```

Each layer has specific responsibilities and communicates only with adjacent layers.

## Repository Layer ([backend/repository/](mdc:backend/repository/))

**Purpose**: Data access abstraction  
**Pattern**: Interface + Implementation

```go
// Define interface in interfaces.go
type ProjectRepository interface {
    Create(project *database.Project) error
    GetByID(id uint, createdBy string) (*database.Project, error)
    // ... other methods
}

// Implement in separate file (project.go)
type projectRepository struct {
    db *gorm.DB
}

func NewProjectRepository(db *gorm.DB) ProjectRepository {
    return &projectRepository{db: db}
}
```

**Key Conventions**:
- All methods include `createdBy` parameter for user isolation
- Return `(entity, error)` or `([]entity, int64, error)` for lists
- Use GORM for database operations
- Handle soft deletes automatically

## Service Layer ([backend/services/](mdc:backend/services/))

**Purpose**: Business logic and orchestration  
**Pattern**: Interface + Implementation with dependency injection

```go
// Interface definition
type ProjectService interface {
    Create(projectData CreateProjectRequest, createdBy string) (*database.Project, error)
    GetByID(id uint, createdBy string) (*database.Project, error)
}

// Implementation
type projectService struct {
    projectRepo  repository.ProjectRepository
    gitCredRepo  repository.GitCredentialRepository
    gitCredService GitCredentialService
    config       *config.Config
}
```

**Key Conventions**:
- Inject all dependencies through constructor
- Validate business rules before calling repository
- Transform between request/response DTOs and domain models
- Handle cross-cutting concerns (logging, validation)

## Handler Layer ([backend/handlers/](mdc:backend/handlers/))

**Purpose**: HTTP request/response handling  
**Pattern**: Struct with service dependencies

```go
type ProjectHandlers struct {
    projectService services.ProjectService
}

func NewProjectHandlers(projectService services.ProjectService) *ProjectHandlers {
    return &ProjectHandlers{
        projectService: projectService,
    }
}
```

**Key Conventions**:
- Extract language from context: `lang := middleware.GetLangFromContext(c)`
- Use `ShouldBindJSON` for request binding with validation
- Return internationalized error messages
- Include Swagger documentation comments
- Handle authentication via middleware

## Middleware Pattern ([backend/middleware/](mdc:backend/middleware/))

All middleware follows the Gin middleware pattern:

```go
func SomeMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        // Pre-processing
        
        c.Next() // Call next handler
        
        // Post-processing (optional)
    }
}
```

**Key Middleware**:
- `AuthMiddleware()`: JWT validation and user context
- `I18nMiddleware()`: Language detection and context
- `OperationLogMiddleware()`: Audit logging
- `ErrorHandlerMiddleware()`: Centralized error handling

## Configuration Pattern ([backend/config/](mdc:backend/config/))

Use environment variables with sensible defaults:

```go
type Config struct {
    Port        string `mapstructure:"SLEEP0_PORT" default:"8080"`
    Environment string `mapstructure:"SLEEP0_ENVIRONMENT" default:"development"`
    // ...
}

func Load() *Config {
    // Load with viper or manual parsing
}
```
---
globs: backend/**
---
