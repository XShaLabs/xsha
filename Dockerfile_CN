# Multi-stage build Dockerfile
# Stage 1: Frontend build environment
FROM m.daocloud.io/docker.io/library/node:20-alpine AS frontend-builder

# Install pnpm
RUN npm install -g pnpm && pnpm config set registry https://registry.npmmirror.com

# Set working directory for frontend
WORKDIR /app/frontend

# Copy frontend package files
COPY frontend/package.json frontend/pnpm-lock.yaml ./

# Install frontend dependencies
RUN pnpm i

# Copy frontend source code
COPY frontend/ .

# Build frontend application (outputs to ../backend/static)
RUN pnpm run build

# Stage 2: Backend build environment
FROM m.daocloud.io/docker.io/library/golang:1.23.1-alpine AS backend-builder

# Set working directory
WORKDIR /app

# Install necessary tools including build dependencies for CGO
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories && \
  apk add --no-cache git ca-certificates tzdata gcc musl-dev sqlite-dev

# Set timezone
ENV TZ=UTC

# Copy go mod files
COPY backend/go.mod backend/go.sum ./

# Download dependencies
RUN go env -w GOPROXY=https://goproxy.cn,direct && go mod download && go mod verify

# Copy backend source code
COPY backend/ .

# Copy frontend build output from previous stage
COPY --from=frontend-builder /app/backend/static ./static

# Build application with CGO enabled for SQLite support
# Docker buildx automatically handles cross-platform builds based on --platform
RUN CGO_ENABLED=1 go build -ldflags="-w -s" -o main .

# Stage 3: Runtime environment
FROM m.daocloud.io/docker.io/library/alpine:latest

# Install necessary packages including Docker CLI and SQLite runtime
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories && \
  apk --no-cache add ca-certificates tzdata curl docker-cli sqlite

# Set timezone
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create non-root user and add to docker group
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup && \
    addgroup -S docker && \
    addgroup appuser docker

# Set working directory
WORKDIR /app

# Copy executable from backend builder stage
COPY --from=backend-builder /app/main .

# Create necessary directories with proper permissions
RUN mkdir -p /app/db /app/workspaces && \
    chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Start application
CMD ["./main"] 